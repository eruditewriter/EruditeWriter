using System;
using System.Collections.Generic;
using System.Windows.Data;
using System.IO;
using System.Linq;
using System.Security;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using System.Xml.Linq;
using System.Windows;

namespace EruditeWriter
{
    public class _Codex
    {
        public string    CodexFileName = null; //string with the fully qualified name of the codex
        public string    dirLocation   = null; //string with the name of the directory for the codex + final '\'
        public string    codexName     = null; //string with the name of the codex
        public XDocument xmlEWC        = null; //XDocument representing our codex EWC file
        public XElement  openElement   = null; //current open element

        private EWApp thisApp = (EWApp)Application.Current;

        public bool CreateCodex(string fullfilename)
        {
            //we assume failure
            bool result = false;
            if (fullfilename != null)
            {
                //setup our codex string variables
                CodexFileName = fullfilename;
                dirLocation = fullfilename.Remove((fullfilename.LastIndexOf('\\')) + 1); //strip the file name
                codexName = CodexFileName.Substring(CodexFileName.LastIndexOf('\\') + 1).Remove(
                                CodexFileName.Substring(CodexFileName.LastIndexOf('\\') + 1).LastIndexOf('.')); //strip the directory and .ewc
                //setup a filestream
                FileStream fs = null;
                try
                {
                    //make the codex .ewc (xml) file
                    fs = File.Create(CodexFileName);
                    if (fs != null)
                    {   //new monograph but we might be overwrighting existing file so check if monograph directory already exists
                        //create draft directory, if it exists the function will still succeed
                        try
                        {
                            Directory.CreateDirectory(dirLocation + codexName + "\\Draft\\FrontMatter");
                            Directory.CreateDirectory(dirLocation + codexName + "\\Published\\FrontMatter");
                            Directory.CreateDirectory(dirLocation + codexName + "\\Draft\\EndMatter");
                            Directory.CreateDirectory(dirLocation + codexName + "\\Published\\EndMatter");
                            Directory.CreateDirectory(dirLocation + codexName + "\\Draft\\Monographs");
                            Directory.CreateDirectory(dirLocation + codexName + "\\Published\\Monographs");
                            Directory.CreateDirectory(dirLocation + codexName + "\\Finished");
                            xmlEWC = new XDocument(
                                //initialize the XML
                                new XDeclaration("1.0", "utf-8", "yes"),
                                new XComment("Autogenerated EruditeWriter Codex Settings File"),
                                //create the root element
                                new XElement("EruditeWriterCodex", new XAttribute("Name", codexName),
                                        new XAttribute("Modified",DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss")),
                                    //create the Draft element child
                                    new XElement("Draft", new XAttribute("Modified", 0), new XAttribute("Expanded", "true"),
                                        //create FrontMatter, EndMatter, and Monographs child elements
                                        new XElement("FrontMatter", new XAttribute("Modified", 0), new XAttribute("Expanded", "false")),
                                        new XElement("EndMatter", new XAttribute("Modified", 0), new XAttribute("Expanded", "false")),
                                        new XElement("Monographs", new XAttribute("Modified", 0), new XAttribute("Expanded", "true"))),
                                    //create the Published element child
                                    new XElement("Published", new XAttribute("Modified", 0),
                                        //create FrontMatter, EndMatter, and Monographs child elements
                                        new XElement("FrontMatter", new XAttribute("Modified", 0), new XAttribute("Expanded", "false")),
                                        new XElement("EndMatter", new XAttribute("Modified", 0), new XAttribute("Expanded", "false")),
                                        new XElement("Monographs", new XAttribute("Modified", 0), new XAttribute("Expanded", "true"))),
                                    //create the Finished child element
                                    new XElement("Finished", new XAttribute("Modified", 0), new XAttribute("Expanded", "true"))
                                ));
                            //save our XML document to disk
                            xmlEWC.Save(fs, SaveOptions.None);
                            //update the most recent file tree view
                            MRUUpdate(CodexFileName);
                            //everything went fine so return true for success
                            result = true;
                        }
                        catch (Exception e)
                        {
                            MessageBox.Show("Failed to create codex directory structure. Error: " + e.ToString());
                            //cleanup by deleting the directory and codex file
                            Directory.Delete(dirLocation);
                            File.Delete(CodexFileName);
                        }
                    }
                }
                catch (UnauthorizedAccessException e)
                {
                    MessageBox.Show("You do not have permission to create the codex file or the file is read only! Error: " + e.ToString());
                }
                catch (IOException e)
                {
                    MessageBox.Show("An I/O error has occurred trying to create the codex! Error: " + e.ToString());
                }
                finally
                {
                    //we always want the filestream to be closed
                    fs.Close();
                }
            }
            return result;
        }//end CreateCodex

        public void OpenCodexXML(string filename)
        {
            //setup our codex string variables
            CodexFileName = filename;
            dirLocation = filename.Remove((filename.LastIndexOf('\\')) + 1); //strip the file name
            codexName = CodexFileName.Substring(CodexFileName.LastIndexOf('\\') + 1).Remove(
                            CodexFileName.Substring(CodexFileName.LastIndexOf('\\') + 1).LastIndexOf('.')); //strip the directory and .ewc
            try
            {
                //load the .ewc (xml) configuration
                xmlEWC = XDocument.Load(CodexFileName);
                //update our most recent used treeview
                MRUUpdate(CodexFileName);
            }
            catch (SecurityException e)
            {
                MessageBox.Show("Not sufficient permissions to open the codex file. Error: " + e.ToString());
            }
        }//end OpenCodexXML

        public bool NewMonograph(string monographname)
        {
            bool exists = false;
            foreach (XElement Monograph in xmlEWC.Root.Element("Draft").Element("Monographs").Elements("Monograph"))
            {
                if (String.Equals((string)Monograph.Attribute("Name"), monographname, StringComparison.OrdinalIgnoreCase))
                {
                    exists = true;
                }
            }
            if (exists == true)
            {
                MessageBox.Show("Monograph already exists.", "Monograph Exists");
                return false;
            }
            try
            {
                Directory.CreateDirectory(dirLocation + codexName + "\\Draft\\Monographs\\" + monographname);
                Directory.CreateDirectory(dirLocation + codexName + "\\Published\\Monographs\\" + monographname);
            }
            catch (Exception e)
            {
                MessageBox.Show("Failed to create monograph directory structure. Error: " + e.ToString());
                return false;
            }
            xmlEWC.Root.Element("Draft").Element("Monographs").Add(
            new XElement("Monograph", new XAttribute("Name", monographname),
                                new XAttribute("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss")),
                                new XAttribute("Expanded", "true")));
            xmlEWC.Root.Element("Published").Element("Monographs").Add(
                new XElement("Monograph", new XAttribute("Name", monographname),
                    new XAttribute("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss")), new XAttribute("Expanded", "true")));
            xmlEWC.Root.Element("Draft").Element("Monographs").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.Element("Draft").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Save(CodexFileName, SaveOptions.None);
            return true;

        }//end NewMonograph

        public bool NewFolio(string folioname, XmlElement monograph)
        {
            //loop through the published elements to see if the folio has already been published
            //loop through the folio elements to see if we already have published
            foreach (XElement Monograph in xmlEWC.Root.Element("Published").Element("Monographs").Elements())
            {
                foreach (XElement Folio in Monograph.Elements())
                {
                    if (String.Equals((string)Folio.Attribute("Name"), folioname, StringComparison.OrdinalIgnoreCase))
                    {
                        //we've published a folio with that name already
                        MessageBox.Show("Published folio already exists with that name! Please choose another name.");
                        return false;
                    }
                }
            }
            //loop through the Draft monograph elements and see if that folio already exists
            foreach (XElement Monograph in xmlEWC.Root.Element("Draft").Element("Monographs").Elements())
            {
                bool canbreak = false;
                foreach (XElement Folio in Monograph.Elements())
                {
                    if (String.Equals((string)Folio.Attribute("Name"), folioname, StringComparison.OrdinalIgnoreCase))
                    {
                        //exists ask if we should overwrite
                        MessageBoxResult result = MessageBox.Show("Folio already exists. Overwrite?", "Folio Exists", MessageBoxButton.YesNo);
                        if (result == MessageBoxResult.No)
                        {
                            return false;
                        }
                        //we can overwrite so delete the file, remove the XElement prior to creating a new version
                        if (thisApp.MSWord.currentDoc != null)
                        {
                            //check if the document is currently open and if so close
                            if (String.Equals(thisApp.MSWord.currentDoc.FullName.ToString(),
                                        Folio.Attribute("FileName").Value.ToString(), StringComparison.OrdinalIgnoreCase))
                            {
                                thisApp.MSWord.CloseDoc();
                            }
                        }
                        try
                        {
                            File.Delete(Folio.Attribute("FileName").Value.ToString());
                        }
                        catch (Exception e)
                        {
                            //we had an error deleting - show error box, free monoelement and return
                            MessageBox.Show("Error deleting existing folio file. Error: " + e.ToString());
                            return false;
                        }
                        Folio.Remove();
                        xmlEWC.Save(CodexFileName, SaveOptions.None);
                        canbreak = true;
                        break;
                    }
                }
                if (canbreak)
                    break;
            }
            //now create the Word document and open it
            if (thisApp.MSWord.OpenDoc(dirLocation + codexName + "\\Draft\\Monographs\\" + monograph.Attributes["Name"].Value.ToString() + "\\" + folioname + ".docx", false))
            {
                XElement monoelement = (from node in xmlEWC.Root.Element("Draft").Element("Monographs").Elements()
                                        where node.Attribute("Name").Value == monograph.Attributes["Name"].Value
                                        select node).First();
                //successfully created Word doc so update XML codex file
                monoelement.Add(
                    new XElement("Folio", new XAttribute("Name", folioname), new XAttribute("FileName",
                            dirLocation + codexName + "\\Draft\\Monographs\\" + monoelement.Attribute("Name").Value.ToString() + "\\" + folioname + ".docx"),
                        new XAttribute("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss")), new XAttribute("Expanded", "false"),
                        new XAttribute("Chars", "0"), new XAttribute("Words", "0"), new XAttribute("Sentences", "0")));
                monoelement.SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
                xmlEWC.Root.Element("Draft").Element("Monographs").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
                xmlEWC.Root.Element("Draft").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
                xmlEWC.Root.SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
                xmlEWC.Save(CodexFileName, SaveOptions.None);
                openElement = (from node in monoelement.Elements()
                               where node.Attribute("Name").Value.ToString() == folioname
                               select node).First();
                monoelement = null;
                return true;
            }
            //something went wrong so return failure
            return false;
        }//end NewFolio

        public bool NewPrelim(string prelimname)
        {
            //loop through the published elements to see if the prelim has already been published
            foreach (XElement Prelim in xmlEWC.Root.Element("Published").Element("FrontMatter").Elements())
            {
                if (String.Equals((string)Prelim.Attribute("Name"), prelimname, StringComparison.OrdinalIgnoreCase))
                {
                    //we've published a folio with that name already
                    MessageBox.Show("Published prelim already exists with that name! Please choose another name.");
                    return false;
                }
            }
            //loop through the Draft frontmatter elements and see if that prelim already exists
            foreach (XElement Prelim in xmlEWC.Root.Element("Draft").Element("FrontMatter").Elements())
            {
                if (String.Equals(Prelim.Attribute("Name").Value.ToString(), prelimname,
                        StringComparison.OrdinalIgnoreCase))
                {
                    //exists ask if we should overwrite
                    MessageBoxResult result = MessageBox.Show("Prelim already exists. Overwrite?", "Prelim Exists", MessageBoxButton.YesNo);
                    if (result == MessageBoxResult.No)
                    {
                        return false;
                    }
                    //we can overwrite so delete the file, remove the XElement prior to creating a new version
                    if (thisApp.MSWord.currentDoc != null)
                    {
                        //check if the document is currently open and if so close
                        if (String.Equals(thisApp.MSWord.currentDoc.FullName.ToString(),
                                xmlEWC.Root.Element("Draft").Element("FrontMatter").Element("Prelim").Attribute("FileName").Value.ToString(),
                                StringComparison.OrdinalIgnoreCase))
                        {
                            thisApp.MSWord.CloseDoc();
                        }
                    }
                    try
                    {
                        File.Delete(xmlEWC.Root.Element("Draft").Element("FrontMatter").Element("Prelim").Attribute("FileName").Value.ToString());
                    }
                    catch (Exception e)
                    {
                        //we had an error deleting - show error box, free monoelement and return
                        MessageBox.Show("Error deleting existing prelim file. Error: " + e.ToString());
                        return false;
                    }
                    Prelim.Remove();
                    xmlEWC.Save(CodexFileName, SaveOptions.None);
                    break;
                }
            }
            //now create the Word document and open it
            if (thisApp.MSWord.OpenDoc(dirLocation + codexName + "\\Draft\\FrontMatter\\" + prelimname + ".docx", false))
            {
                //successfully created Word doc so update XML codex file
                xmlEWC.Root.Element("Draft").Element("FrontMatter").Add(
                    new XElement("Prelim", new XAttribute("Name", prelimname), new XAttribute("FileName",
                            dirLocation + codexName + "\\Draft\\FrontMatter\\" + prelimname + ".docx"),
                        new XAttribute("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss")), new XAttribute("Expanded", "")));
                xmlEWC.Root.Element("Draft").Element("FrontMatter").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
                xmlEWC.Root.Element("Draft").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
                xmlEWC.Root.SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
                xmlEWC.Save(CodexFileName, SaveOptions.None);
                openElement = (from node in xmlEWC.Root.Element("Draft").Element("FrontMatter").Elements()
                               where node.Attribute("Name").Value.ToString() == prelimname
                               select node).First();
            }
            return true;
        }//end NewPrelim

        public bool NewMatter(string mattername)
        {
            //loop through the published elements to see if the matter has already been published
            foreach (XElement Prelim in xmlEWC.Root.Element("Published").Element("EndMatter").Elements())
            {
                if (String.Equals((string)Prelim.Attribute("Name"), mattername, StringComparison.OrdinalIgnoreCase))
                {
                    //we've published a folio with that name already
                    MessageBox.Show("Published matter already exists with that name! Please choose another name.");
                    return false;
                }
            }
            //loop through the Draft endmatter elements and see if that prelim already exists
            foreach (XElement Matter in xmlEWC.Root.Element("Draft").Element("EndMatter").Elements())
            {
                if (String.Equals(Matter.Attribute("Name").Value.ToString(), mattername,
                        StringComparison.OrdinalIgnoreCase))
                {
                    //exists ask if we should overwrite
                    MessageBoxResult result = MessageBox.Show("Matter already exists. Overwrite?", "Matter Exists", MessageBoxButton.YesNo);
                    if (result == MessageBoxResult.No)
                    {
                        return false;
                    }
                    //we can overwrite so delete the file, remove the XElement prior to creating a new version
                    if (thisApp.MSWord.currentDoc != null)
                    {
                        //check if the document is currently open and if so close
                        if (String.Equals(thisApp.MSWord.currentDoc.FullName.ToString(),
                                xmlEWC.Root.Element("Draft").Element("EndMatter").Element("Matter").Attribute("FileName").Value.ToString(),
                                StringComparison.OrdinalIgnoreCase))
                        {
                            thisApp.MSWord.CloseDoc();
                        }
                    }
                    try
                    {
                        File.Delete(xmlEWC.Root.Element("Draft").Element("EndMatter").Element("Matter").Attribute("FileName").Value.ToString());
                    }
                    catch (Exception e)
                    {
                        //we had an error deleting - show error box, free monoelement and return
                        MessageBox.Show("Error deleting existing matter file. Error: " + e.ToString());
                        return false;
                    }
                    Matter.Remove();
                    xmlEWC.Save(CodexFileName, SaveOptions.None);
                    break;
                }
            }
            //now create the Word document and open it
            if (thisApp.MSWord.OpenDoc(dirLocation + codexName + "\\Draft\\EndMatter\\" + mattername + ".docx", false))
            {
                //successfully created Word doc so update XML codex file
                xmlEWC.Root.Element("Draft").Element("EndMatter").Add(
                    new XElement("Matter", new XAttribute("Name", mattername), new XAttribute("FileName",
                            dirLocation + codexName + "\\Draft\\EndMatter\\" + mattername + ".docx"),
                        new XAttribute("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss")), new XAttribute("Expanded", "")));
                xmlEWC.Root.Element("Draft").Element("EndMatter").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
                xmlEWC.Root.Element("Draft").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
                xmlEWC.Root.SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
                xmlEWC.Save(CodexFileName, SaveOptions.None);
                openElement = (from node in xmlEWC.Root.Element("Draft").Element("EndMatter").Elements()
                               where node.Attribute("Name").Value.ToString() == mattername
                               select node).First();
            }
            return true;
        }//end NewMatter

        public bool NewSection(string sectionname, XmlElement node)
        {
            XElement folio = FindXElement(node);
            if (folio.HasElements)
            {
                foreach (XElement Section in folio.Elements())
                {
                    if (String.Equals(Section.Name.ToString(), sectionname, StringComparison.OrdinalIgnoreCase))
                    {
                        //exists ask if we should overwrite
                        MessageBoxResult result = MessageBox.Show("Section already exists. Overwrite?", "Section Exists", MessageBoxButton.YesNo);
                        if (result == MessageBoxResult.No)
                        {
                            return false;
                        }
                        //we can overwrite so delete the file, remove the XElement prior to creating a new version
                        if (thisApp.MSWord.currentDoc != null)
                        {
                            //check if the document is currently open and if so close
                            if (String.Equals(thisApp.MSWord.currentDoc.FullName.ToString(),
                                        Section.Attribute("FileName").Value.ToString(), StringComparison.OrdinalIgnoreCase))
                            {
                                thisApp.MSWord.CloseDoc();
                            }
                        }
                        try
                        {
                            File.Delete(Section.Attribute("FileName").Value.ToString());
                        }
                        catch (Exception e)
                        {
                            //we had an error deleting - show error box, free monoelement and return
                            MessageBox.Show("Error deleting existing section file. Error: " + e.ToString());
                            return false;
                        }
                        Section.Remove();
                        xmlEWC.Save(CodexFileName, SaveOptions.None);
                        break;
                    }
                }
            }
            string filename = folio.Attribute("FileName").Value.ToString();
            filename = filename.Remove(filename.LastIndexOf('\\') + 1);
            try
            {
                Directory.CreateDirectory(filename + folio.Attribute("Name").Value.ToString() + "_Sections");
            }
            catch (Exception e)
            {
                MessageBox.Show("Failed to create section directory structure. Error: " + e.ToString());
                return false;
            }
            if (thisApp.MSWord.OpenDoc(filename + folio.Attribute("Name").Value.ToString()+ "_Sections\\" + sectionname + ".docx", false))
            {
                folio.Add(new XElement("Section", new XAttribute("Name", sectionname),
                            new XAttribute("FileName", filename + folio.Attribute("Name").Value.ToString() + "_Sections\\" + sectionname + ".docx"),
                            new XAttribute("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss")),
                            new XAttribute("Expanded", "false")));
                folio.SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
                folio.Parent.SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss")); //monograph
                xmlEWC.Root.Element("Draft").Element("Monographs").SetAttributeValue("Modified",
                                                        DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
                xmlEWC.Root.Element("Draft").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
                xmlEWC.Root.SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
                xmlEWC.Save(CodexFileName, SaveOptions.None);
                return true;
            }
            return false;
        }//end NewSection

        public bool DeleteMonograph(XmlElement monograph)
        {
            //loop through and check if the Monograph has any published folios
            XElement pubmono = (from node in xmlEWC.Root.Element("Published").Element("Monographs").Elements()
                                where node.Attribute("Name").Value == monograph.Attributes["Name"].Value
                                select node).FirstOrDefault();
            //loop through the drafts to find the Monograph node
            XElement draftmono = (from node in xmlEWC.Root.Element("Draft").Element("Monographs").Elements()
                                  where node.Attribute("Name").Value == monograph.Attributes["Name"].Value
                                  select node).FirstOrDefault();
            //see if the published Monograph has any child elements
            if (pubmono.HasElements)
            {
                //it has child nodes so dispaly a dialog and return
                MessageBox.Show("Monograph has published elements. Unpublish these first to delete Monograph.");
                return false;
            }
            //loop through any folios and close them if they are open only need to check draft as if it is published we already left
            if (thisApp.MSWord.currentDoc != null)
            {
                foreach (XElement folio in draftmono.Elements())
                {
                    if (String.Equals(thisApp.MSWord.currentDoc.FullName,
                                folio.Attribute("FileName").Value.ToString(), StringComparison.OrdinalIgnoreCase))
                    {
                        thisApp.MSWord.CloseDoc();
                        break;
                    }
                }
            }
            //no Published folios and if open it is closed so delete the monograph directories
            try
            {
                Directory.Delete(dirLocation + codexName + "\\Draft\\Monographs\\" + monograph.Attributes["Name"].Value.ToString(), true);
                Directory.Delete(dirLocation + codexName + "\\Published\\Monographs\\" + monograph.Attributes["Name"].Value.ToString(), true);
            }
            catch (Exception e)
            {
                MessageBox.Show("Error deleting Monograph directory. Error: " + e.ToString());
                return false;
            }
            pubmono.Remove();
            draftmono.Remove();
            xmlEWC.Root.Element("Draft").Element("Monographs").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.Element("Published").Element("Monographs").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Save(CodexFileName, SaveOptions.None);
            return true;
        }//end DeleteMonograph

        public bool DeleteFolio(XmlElement folio)
        {
            if (thisApp.MSWord.currentDoc != null)
            {
                //check if document is open and close before deleting
                if (String.Equals(thisApp.MSWord.currentDoc.FullName,
                            folio.Attributes["FileName"].Value.ToString(), StringComparison.OrdinalIgnoreCase))
                {
                    thisApp.MSWord.CloseDoc();
                }
            }
            try
            {
                File.Delete(folio.Attributes["FileName"].Value.ToString());
            }
            catch (Exception e)
            {
                //file couldn't be deleted - show error dialog and free element variables and return
                MessageBox.Show("Error deleting folio file. Error: " + e.ToString());
                return false;
            }
            //folio deleted so remove from XML tree
            XElement monoelement = (from node in xmlEWC.Root.Element("Draft").Element("Monographs").Elements()
                                    where node.Attribute("Name").Value == folio.ParentNode.Attributes["Name"].Value
                                    select node).First();
            XElement folioelement = (from node in monoelement.Elements()
                                     where node.Attribute("Name").Value == folio.Attributes["Name"].Value
                                     select node).First();
            folioelement.Remove();
            //update modified attributes up the XML tree
            monoelement.SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.Element("Draft").Element("Monographs").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.Element("Draft").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Save(CodexFileName, SaveOptions.None);
            //free our element variables
            monoelement = null;
            folioelement = null;
            return true;
        }//end DeleteFolio

        public bool DeletePrelim(XmlElement prelim)
        {
            if (thisApp.MSWord.currentDoc != null)
            {
                //check if document is open and close before deleting
                if (String.Equals(thisApp.MSWord.currentDoc.FullName,
                            prelim.Attributes["FileName"].Value.ToString(), StringComparison.OrdinalIgnoreCase))
                {
                    thisApp.MSWord.CloseDoc();
                }
            }
            try
            {
                File.Delete(prelim.Attributes["FileName"].Value.ToString());
            }
            catch (Exception e)
            {
                //file couldn't be deleted - show error dialog and free element variables and return
                MessageBox.Show("Error deleting prelim file. Error: " + e.ToString());
                return false;
            }
            //folio deleted so remove from XML tree
            XElement prelimelement = (from node in xmlEWC.Root.Element("Draft").Element("FrontMatter").Elements()
                                      where node.Attribute("Name").Value == prelim.Attributes["Name"].Value
                                      select node).First();
            prelimelement.Remove();
            //update modified attributes up the XML tree
            xmlEWC.Root.Element("Draft").Element("FrontMatter").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.Element("Draft").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Save(CodexFileName, SaveOptions.None);
            prelimelement = null;
            return true;
        }//end DeletePrelim

        public bool DeleteMatter(XmlElement matter)
        {
            if (thisApp.MSWord.currentDoc != null)
            {
                //check if document is open and close before deleting
                if (String.Equals(thisApp.MSWord.currentDoc.FullName,
                            matter.Attributes["FileName"].Value.ToString(), StringComparison.OrdinalIgnoreCase))
                {
                    thisApp.MSWord.CloseDoc();
                }
            }
            try
            {
                File.Delete(matter.Attributes["FileName"].Value.ToString());
            }
            catch (Exception e)
            {
                //file couldn't be deleted - show error dialog and free element variables and return
                MessageBox.Show("Error deleting matter file. Error: " + e.ToString());
                return false;
            }
            //folio deleted so remove from XML tree
            XElement prelimelement = (from node in xmlEWC.Root.Element("Draft").Element("EndMatter").Elements()
                                      where node.Attribute("Name").Value == matter.Attributes["Name"].Value
                                      select node).First();
            prelimelement.Remove();
            //update modified attributes up the XML tree
            xmlEWC.Root.Element("Draft").Element("EndMatter").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.Element("Draft").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Save(CodexFileName, SaveOptions.None);
            prelimelement = null;
            return true;
        }//end DeleteMatter

        public bool DeleteSection(XmlElement section)
        {
            if (thisApp.MSWord.currentDoc != null)
            {
                //check if document is open and close before deleting
                if (String.Equals(thisApp.MSWord.currentDoc.FullName,
                            section.Attributes["FileName"].Value.ToString(), StringComparison.OrdinalIgnoreCase))
                {
                    thisApp.MSWord.CloseDoc();
                }
            }
            try
            {
                File.Delete(section.Attributes["FileName"].Value.ToString());
            }
            catch (Exception e)
            {
                //file couldn't be deleted - show error dialog and free element variables and return
                MessageBox.Show("Error deleting section file. Error: " + e.ToString());
                return false;
            }
            //section deleted so remove from XML tree
            XElement sectionelement = FindXElement(section);
            //update modified attributes up the XML tree
            sectionelement.Parent.SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss")); //folio
            sectionelement.Parent.Parent.SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss")); //monograph
            sectionelement.Remove();
            xmlEWC.Root.Element("Draft").Element("Monographs").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.Element("Draft").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Save(CodexFileName, SaveOptions.None);
            sectionelement = null;
            try
            {
                string directoryname = section.Attributes["FileName"].Value.ToString();
                directoryname = directoryname.Remove(directoryname.LastIndexOf('\\') + 1);
                if (Directory.EnumerateFiles(directoryname).Count() == 0)
                { //empty directory so delete
                    Directory.Delete(directoryname);
                }
            }
            catch (Exception e)
            {
                //file couldn't be deleted - show error dialog and free element variables and return
                MessageBox.Show("Error deleting section directory. Section was deleted and EWC file updated but directory remains. Error: " + e.ToString());
            }
            return true;
        }//end DeleteSection

        public bool PublishFolio(XmlElement folio)
        {
            //first close the doc if it is open
            if (thisApp.MSWord.currentDoc != null)
            {
                    if (String.Equals(thisApp.MSWord.currentDoc.FullName,
                                folio.Attributes["FileName"].Value.ToString(), StringComparison.OrdinalIgnoreCase))
                    {
                        thisApp.MSWord.CloseDoc();
                    }
            }
            if (folio.HasChildNodes)
            {
                MessageBox.Show("Folio has Sections. Please promote or delete sections before publishing.");
                return false;
            }
            //try to move the file to the published directory
            try
            {
                File.Move(folio.Attributes["FileName"].Value.ToString(), folio.Attributes["FileName"].Value.ToString().Replace("Draft","Published"));
            }
            catch (Exception e)
            {
                MessageBox.Show("Error copying existing folio file to Publish directory. Error: " + e.ToString());
                return false;
            }
            //get the folio element from xmlEWC
            XElement draftfolio = FindXElement(folio);
            //loop through and get the monograph element in the Published tree
            XElement pubmonograph = (from node in xmlEWC.Root.Element("Published").Element("Monographs").Elements()
                            where node.Attribute("Name").Value == folio.ParentNode.Attributes["Name"].Value
                            select node).FirstOrDefault();
            pubmonograph.Add(
                new XElement("Folio", new XAttribute("Name", folio.Attributes["Name"].Value.ToString()), new XAttribute("FileName",
                        folio.Attributes["FileName"].Value.ToString().Replace("Draft", "Published")),
                    new XAttribute("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss")), new XAttribute("Expanded", "")));
            draftfolio.Parent.SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            draftfolio.Remove();
            pubmonograph.SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.Element("Published").Element("Monographs").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.Element("Draft").Element("Monographs").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.Element("Published").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.Element("Draft").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Save(CodexFileName, SaveOptions.None);
            draftfolio = null;
            pubmonograph = null;
            return true;
        }//end PublishFolio

        public bool PublishPrelim(XmlElement prelim)
        {
            //first close the doc if it is open
            if (thisApp.MSWord.currentDoc != null)
            {
                if (String.Equals(thisApp.MSWord.currentDoc.FullName,
                            prelim.Attributes["FileName"].Value.ToString(), StringComparison.OrdinalIgnoreCase))
                {
                    thisApp.MSWord.CloseDoc();
                }
            }
            //try to move the file to the published directory
            try
            {
                File.Move(prelim.Attributes["FileName"].Value.ToString(), prelim.Attributes["FileName"].Value.ToString().Replace("Draft", "Published"));
            }
            catch (Exception e)
            {
                MessageBox.Show("Error copying existing prelim file to Publish directory. Error: " + e.ToString());
                return false;
            }
            //now update the XML
            //loop through the draft child and get the monograph node
            XElement draftprelim = FindXElement(prelim);
            xmlEWC.Root.Element("Published").Element("FrontMatter").Add(
                new XElement("Prelim", new XAttribute("Name", prelim.Attributes["Name"].Value.ToString()), new XAttribute("FileName",
                        prelim.Attributes["FileName"].Value.ToString().Replace("Draft", "Published")),
                    new XAttribute("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss")), new XAttribute("Expanded", "")));
            draftprelim.Remove();
            xmlEWC.Root.Element("Published").Element("FrontMatter").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.Element("Published").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.Element("Draft").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Save(CodexFileName, SaveOptions.None);
            draftprelim = null;
            return true;
        }//end PublishPrelim

        public bool PublishMatter(XmlElement matter)
        {
            //first close the doc if it is open
            if (thisApp.MSWord.currentDoc != null)
            {
                if (String.Equals(thisApp.MSWord.currentDoc.FullName,
                            matter.Attributes["FileName"].Value.ToString(), StringComparison.OrdinalIgnoreCase))
                {
                    thisApp.MSWord.CloseDoc();
                }
            }
            //try to move the file to the published directory
            try
            {
                File.Move(matter.Attributes["FileName"].Value.ToString(), matter.Attributes["FileName"].Value.ToString().Replace("Draft", "Published"));
            }
            catch (Exception e)
            {
                MessageBox.Show("Error copying existing prelim file to Publish directory. Error: " + e.ToString());
                return false;
            }
            //now update the XML
            //loop through the draft child and get the monograph node
            XElement draftmatter = FindXElement(matter);
            xmlEWC.Root.Element("Published").Element("EndMatter").Add(
                new XElement("Matter", new XAttribute("Name", matter.Attributes["Name"].Value.ToString()), new XAttribute("FileName",
                        matter.Attributes["FileName"].Value.ToString().Replace("Draft", "Published")),
                    new XAttribute("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss")), new XAttribute("Expanded", "")));
            draftmatter.Remove();
            xmlEWC.Root.Element("Published").Element("EndMatter").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.Element("Published").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.Element("Draft").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Save(CodexFileName, SaveOptions.None);
            draftmatter = null;
            return true;
        }//end PublishMatter

        public bool UnPublishFolio(XmlElement folio)
        {
            //first close the doc if it is open
            if (thisApp.MSWord.currentDoc != null)
            {
                if (String.Equals(thisApp.MSWord.currentDoc.FullName,
                            folio.Attributes["FileName"].Value.ToString(), StringComparison.OrdinalIgnoreCase))
                {
                    thisApp.MSWord.CloseDoc();
                }
            }
            try
            {
                //try and move the file to the Draft directory
                File.Move(folio.Attributes["FileName"].Value.ToString(), folio.Attributes["FileName"].Value.ToString().Replace("Published", "Draft"));
            }
            catch (Exception e)
            {
                MessageBox.Show("Error moving published folio file to draft. Error: " + e.ToString());
                return false;
            }
            //find our Monograph in the published node
            XElement pubfolio = (from node in xmlEWC.Root.Element("Published").Element("Monographs").Elements()
                                 where node.Attribute("Name").Value == folio.ParentNode.Attributes["Name"].Value
                                 select node).FirstOrDefault();
            //loop through the child elements of the monograph and get the folio
            pubfolio = (from node in pubfolio.Elements()
                        where node.Attribute("Name").Value == folio.Attributes["Name"].Value
                        select node).FirstOrDefault();
            //loop through and get the monograph element in the Draft tree
            XElement draftmono = (from node in xmlEWC.Root.Element("Draft").Element("Monographs").Elements()
                                  where node.Attribute("Name").Value == folio.ParentNode.Attributes["Name"].Value
                                  select node).FirstOrDefault();
            //update the XML
            draftmono.Add(
                    new XElement("Folio", new XAttribute("Name", folio.Attributes["Name"].Value.ToString()), new XAttribute("FileName",
                            folio.Attributes["FileName"].Value.ToString().Replace("Published", "Draft")),
                        new XAttribute("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss")), new XAttribute("Expanded", "")));
            pubfolio.Parent.SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            pubfolio.Remove();
            draftmono.SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.Element("Published").Element("Monographs").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.Element("Draft").Element("Monographs").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.Element("Draft").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.Element("Published").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Save(CodexFileName, SaveOptions.None);
            pubfolio = null;
            draftmono = null;
            return true;
        }//end UnPublishFolio

        public bool UnPublishPrelim(XmlElement prelim)
        {
            //first close the doc if it is open
            if (thisApp.MSWord.currentDoc != null)
            {
                if (String.Equals(thisApp.MSWord.currentDoc.FullName,
                            prelim.Attributes["FileName"].Value.ToString(), StringComparison.OrdinalIgnoreCase))
                {
                    thisApp.MSWord.CloseDoc();
                }
            }
            try
            {
                //try and move the file to the Draft directory
                File.Move(prelim.Attributes["FileName"].Value.ToString(), prelim.Attributes["FileName"].Value.ToString().Replace("Published", "Draft"));
            }
            catch (Exception e)
            {
                MessageBox.Show("Error moving published folio file to draft. Error: " + e.ToString());
                return false;
            }
            //find our Monograph in the published node
            XElement pubprelim = (from node in xmlEWC.Root.Element("Published").Element("FrontMatter").Elements()
                                  where node.Attribute("Name").Value == prelim.Attributes["Name"].Value
                                  select node).FirstOrDefault();
            //update the XML
            pubprelim.Remove();
            xmlEWC.Root.Element("Draft").Element("FrontMatter").Add(
                    new XElement("Prelim", new XAttribute("Name", prelim.Attributes["Name"].Value.ToString()), new XAttribute("FileName",
                            prelim.Attributes["FileName"].Value.ToString().Replace("Published", "Draft")),
                        new XAttribute("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss")), new XAttribute("Expanded", "")));
            xmlEWC.Root.Element("Draft").Element("FrontMatter").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.Element("Published").Element("FrontMatter").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.Element("Draft").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.Element("Published").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Save(CodexFileName, SaveOptions.None);
            pubprelim = null;
            return true;
        }//end UnpublishPrelim

        public bool UnPublishMatter(XmlElement matter)
        {
            //first close the doc if it is open
            if (thisApp.MSWord.currentDoc != null)
            {
                if (String.Equals(thisApp.MSWord.currentDoc.FullName,
                            matter.Attributes["FileName"].Value.ToString(), StringComparison.OrdinalIgnoreCase))
                {
                    thisApp.MSWord.CloseDoc();
                }
            }
            try
            {
                //try and move the file to the Draft directory
                File.Move(matter.Attributes["FileName"].Value.ToString(), matter.Attributes["FileName"].Value.ToString().Replace("Published", "Draft"));
            }
            catch (Exception e)
            {
                MessageBox.Show("Error moving published folio file to draft. Error: " + e.ToString());
                return false;
            }
            //find our Monograph in the published node
            XElement pubmatter = (from node in xmlEWC.Root.Element("Published").Element("EndMatter").Elements()
                                  where node.Attribute("Name").Value == matter.Attributes["Name"].Value
                                  select node).FirstOrDefault();
            //update the XML
            pubmatter.Remove();
            xmlEWC.Root.Element("Draft").Element("EndMatter").Add(
                    new XElement("Matter", new XAttribute("Name", matter.Attributes["Name"].Value.ToString()), new XAttribute("FileName",
                            matter.Attributes["FileName"].Value.ToString().Replace("Published", "Draft")),
                        new XAttribute("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss")), new XAttribute("Expanded", "")));
            xmlEWC.Root.Element("Draft").Element("EndMatter").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.Element("Published").Element("EndMatter").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.Element("Draft").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.Element("Published").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Root.SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
            xmlEWC.Save(CodexFileName, SaveOptions.None);
            pubmatter = null;
            return true;
        }//end UnpublishMatter

       public bool PromoteSection(XmlElement element)
        {
            XElement node = FindXElement(element);
            List<string> filestomerge = new List<string>();
            string foliofilename = null;
            if (String.Equals(node.Name.ToString(), "Folio")) //promote all?
            {
                foliofilename = node.Attribute("FileName").Value.ToString();
                foreach (XElement Section in node.Elements())
                {
                    filestomerge.Add(Section.Attribute("FileName").Value.ToString());
                }
            }
            else
            {
                foliofilename = node.Parent.Attribute("FileName").Value.ToString();
                filestomerge.Add(node.Attribute("FileName").Value.ToString());
            }
            if (thisApp.MSWord.PromoteDocs(filestomerge, foliofilename))
            {
                if (String.Equals(node.Name.ToString(), "Folio")) //promote all?
                {
                    //node.SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss")); //folio
                    //node.Parent.SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss")); //monograph
                    foreach (XmlElement Section in element.ChildNodes)
                    {
                            DeleteSection(Section);
                    }
                }
                else
                {
                    //node.Parent.SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss")); //folio
                    //node.Parent.Parent.SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss")); //monograph
                    DeleteSection(element);
                }
                //xmlEWC.Root.Element("Draft").Element("Monographs").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
                //xmlEWC.Root.Element("Draft").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
                //xmlEWC.Root.SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
                //xmlEWC.Save(CodexFileName, SaveOptions.None);
                openElement = xmlEWC.Root.Element("Finished");
                return true;
            }
            return false;
        }

        public void FinishCodex()
        {
            FileStream fs = null;
            List<string> filestomerge = new List<string>();
            string finishname = dirLocation + codexName + "\\Finished\\" +
                xmlEWC.Root.Attribute("Name").Value.ToString() + ".docx";
            if (File.Exists(finishname))
            {
                try
                {
                    if (thisApp.MSWord.currentDoc != null)
                    {
                        //check if the cuurentdoc is the Finish file we are merging to
                        if (String.Equals(thisApp.MSWord.currentDoc.FullName, finishname, StringComparison.OrdinalIgnoreCase))
                        {
                            //close and delete the file before continuing (essentially overwrite)
                            thisApp.MSWord.CloseDoc();
                            File.Delete(finishname);
                        }
                    }
                }
                catch (Exception e)
                {
                    MessageBox.Show("An error ocurred deleting existing Finish document. Error: " + e.ToString());
                    return;
                }
            }
            try
            {
                fs = File.Create(finishname);
            }
            catch (UnauthorizedAccessException)
            {
                MessageBox.Show("You do not have permission to create the finish file or the file is read only!");
                return;
            }
            catch (IOException)
            {
                MessageBox.Show("An I/O error has occurred trying to finish the codex!");
                return;
            }
            finally
            {
                fs.Close();
            }
            foreach (XElement Prelim in xmlEWC.Root.Element("Published").Element("FrontMatter").Elements())
            {
                filestomerge.Add(Prelim.Attribute("FileName").Value.ToString());
            }
            foreach (XElement Monograph in xmlEWC.Root.Element("Published").Element("Monographs").Elements("Monograph"))
            {
                foreach (XElement Folio in Monograph.Elements("Folio"))
                {
                    filestomerge.Add(Folio.Attribute("FileName").Value.ToString());
                }
            }
            foreach (XElement Matter in xmlEWC.Root.Element("Published").Element("EndMatter").Elements())
            {
                filestomerge.Add(Matter.Attribute("FileName").Value.ToString());
            }
            if (thisApp.MSWord.FinishDocs(filestomerge, finishname))
            {
                xmlEWC.Root.SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
                xmlEWC.Root.Element("Finished").Add(new XAttribute("FileName", finishname), new XAttribute("Expanded", ""));
                xmlEWC.Root.Element("Finished").SetAttributeValue("Modified", DateTime.Now.ToString(@"MM\/dd\/yyy HH:mm:ss"));
                xmlEWC.Save(CodexFileName, SaveOptions.None);
                openElement = xmlEWC.Root.Element("Finished");
            }

        }//end FinishCodex

        public void ElementUpDown(XmlElement node, bool up)
        {
            //find element
            XElement element = FindXElement(node);
            if (up == true)
            {
                //Walk backwards until we find an element(ignore text nodes)
                XNode previousNode = element.PreviousNode;
                while (previousNode != null && !(previousNode is XElement))
                {
                    previousNode = previousNode.PreviousNode;
                }
                if (previousNode == null)
                {
                    //already at the top of the list
                    return;
                }
                //remove the node and insert before itself
                element.Remove();
                previousNode.AddBeforeSelf(element);
            }
            else
            {
                //Walk backwards until we find an element(ignore text nodes)
                XNode nextNode = element.NextNode;
                while (nextNode != null && !(nextNode is XElement))
                {
                    nextNode = nextNode.NextNode;
                }
                if (nextNode == null)
                {
                    //already at the bottom of the list
                    return;
                }
                //remove the node and insert after itself
                element.Remove();
                nextNode.AddAfterSelf(element);
            }
            xmlEWC.Save(CodexFileName, SaveOptions.None);
            return;
        }//end ElementUpDown

        public XElement FindXElement(XmlElement node)
        {
            //walk through the xml and compare each XElement name to the XmlElement name
            XElement element = null;
            //Only one node for "Draft" and "Published"
            switch (node.Name.ToString())
            {
                case "Finished":
                    element = thisApp.Codex.xmlEWC.Root.Element("Finished");
                    break;
                case "Draft":
                    element = thisApp.Codex.xmlEWC.Root.Element("Draft");
                    break;
                case "Published":
                    element = thisApp.Codex.xmlEWC.Root.Element("Published");
                    break;
                case "FrontMatter":
                    if (String.Equals(node.ParentNode.Name.ToString(), "Draft"))
                    {
                        element = thisApp.Codex.xmlEWC.Root.Element("Draft").Element("FrontMatter");
                    }
                    else
                    {
                        element = thisApp.Codex.xmlEWC.Root.Element("Published").Element("FrontMatter");
                    }
                    break;
                case "EndMatter":
                    if (String.Equals(node.ParentNode.Name.ToString(), "Draft"))
                    {
                        element = thisApp.Codex.xmlEWC.Root.Element("Draft").Element("EndMatter");
                    }
                    else
                    {
                        element = thisApp.Codex.xmlEWC.Root.Element("Published").Element("EndMatter");
                    }
                    break;
                case "Monographs":
                    if (String.Equals(node.ParentNode.Name.ToString(), "Draft"))
                    {
                        element = thisApp.Codex.xmlEWC.Root.Element("Draft").Element("Monographs");
                    }
                    else
                    {
                        element = thisApp.Codex.xmlEWC.Root.Element("Published").Element("Monographs");
                    }
                    break;
                case "Monograph":
                    if (String.Equals(node.Name.ToString(), "Monograph"))
                    {                         //Monographs //Draft or Published
                        if (String.Equals(node.ParentNode.ParentNode.Name.ToString(), "Draft"))
                        {
                            //loop through the draft branch to find the monograph element
                            foreach (XElement el in thisApp.Codex.xmlEWC.Root.Element("Draft").Element("Monographs").Elements())
                            {
                                if (String.Equals(node.Attributes["Name"].Value.ToString(), el.Attribute("Name").Value.ToString()))
                                {
                                    element = el;
                                    break;
                                }
                            }
                        }
                        else
                        {
                            //loop through the published branch to find the monograph element
                            foreach (XElement el in thisApp.Codex.xmlEWC.Root.Element("Published").Element("Monographs").Elements())
                            {
                                if (String.Equals(node.Attributes["Name"].Value.ToString(), el.Attribute("Name").Value.ToString()))
                                {
                                    element = el;
                                    break;
                                }
                            }
                        }
                    }
                    break;
                case "Prelim":
                    if (String.Equals(node.ParentNode.ParentNode.Name.ToString(), "Draft"))
                    {
                        //loop through the draft FrontMatter to find prelim
                        foreach (XElement el in thisApp.Codex.xmlEWC.Root.Element("Draft").Element("FrontMatter").Elements())
                        {
                            if (String.Equals(node.Attributes["Name"].Value.ToString(), el.Attribute("Name").Value.ToString()))
                            {
                                element = el;
                                break;
                            }
                        }
                    }
                    else
                    {
                        //loop through the published FrontMatter to find prelim
                        foreach (XElement el in thisApp.Codex.xmlEWC.Root.Element("Published").Element("FrontMatter").Elements())
                        {
                            if (String.Equals(node.Attributes["Name"].Value.ToString(), el.Attribute("Name").Value.ToString()))
                            {
                                element = el;
                                break;
                            }
                        }
                    }
                    break;
                case "Matter":
                    if (String.Equals(node.ParentNode.ParentNode.Name.ToString(), "Draft"))
                    {
                        //loop through the draft EndMatter to find matter
                        foreach (XElement el in thisApp.Codex.xmlEWC.Root.Element("Draft").Element("EndMatter").Elements())
                        {
                            if (String.Equals(node.Attributes["Name"].Value.ToString(), el.Attribute("Name").Value.ToString()))
                            {
                                element = el;
                                break;
                            }
                        }
                    }
                    else
                    {
                        //loop through the published EndMatter to find matter
                        foreach (XElement el in thisApp.Codex.xmlEWC.Root.Element("Published").Element("EndMatter").Elements())
                        {
                            if (String.Equals(node.Attributes["Name"].Value.ToString(), el.Attribute("Name").Value.ToString()))
                            {
                                element = el;
                                break;
                            }
                        }
                    }
                    break;
                case "Section":
                    foreach (XElement monograph in thisApp.Codex.xmlEWC.Root.Element("Draft").Element("Monographs").Elements())
                    {
                        bool canbreak = false;
                        if (String.Equals(node.ParentNode.ParentNode.Attributes["Name"].Value.ToString(), monograph.Attribute("Name").Value.ToString()))
                        {
                            foreach (XElement folio in monograph.Elements())
                            {
                                if (String.Equals(node.ParentNode.Attributes["Name"].Value.ToString(), folio.Attribute("Name").Value.ToString()))
                                {
                                    foreach (XElement el in folio.Elements())
                                    {
                                        if (String.Equals(node.Attributes["Name"].Value.ToString(), el.Attribute("Name").Value.ToString()))
                                        {
                                            element = el;
                                            canbreak = true;
                                            break;
                                        }
                                    }
                                }
                                if (canbreak)
                                    break;
                            }
                            if (canbreak)
                                break;
                        }
                    }
                    break;
                case "Folio":
                    //Get great grandparent of XmlElement to determine draft or published branch
                    //Monograph //Mgraphs //Draft or Published
                    if (String.Equals(node.ParentNode.ParentNode.ParentNode.Name.ToString(), "Draft"))
                    {
                        //loop through the draft monographs
                        foreach (XElement monograph in thisApp.Codex.xmlEWC.Root.Element("Draft").Element("Monographs").Elements())
                        {
                            bool canbreak = false;//tells me we found the folio and can stop looping through the monographs
                                                  //and then loop through that monograph's child elements
                            foreach (XElement el in monograph.Elements())
                            {
                                if (String.Equals(node.Attributes["Name"].Value.ToString(), el.Attribute("Name").Value.ToString()))
                                {
                                    element = el;
                                    canbreak = true;
                                    break;
                                }
                            }
                            if (canbreak)
                                break;
                        }
                    }
                    else
                    {
                        //loop through the draft monographs
                        foreach (XElement monograph in thisApp.Codex.xmlEWC.Root.Element("Published").Element("Monographs").Elements())
                        {
                            bool canbreak = false;//tells me we found the folio and can stop looping through the monographs
                                                  //and then loop through that monograph's child elements
                            foreach (XElement el in monograph.Elements())
                            {
                                if (String.Equals(node.Attributes["Name"].Value.ToString(), el.Attribute("Name").Value.ToString()))
                                {
                                    element = el;
                                    canbreak = true;
                                    break;
                                }
                            }
                            if (canbreak)
                                break;
                        }
                    }
                    break;
                default:
                    break;
            }
            return element; //return what we found in the xmlEWC
        }//end FindXElement

        public void GetStatCount(out int chars, out int words, out int sentences)
        {
            chars = 0;
            words = 0;
            sentences = 0;
            foreach (XElement Monograph in xmlEWC.Root.Element("Draft").Element("Monographs").Elements())
            {
                foreach (XElement Folio in Monograph.Elements())
                {
                    chars     += int.Parse(Folio.Attribute("Chars").Value.ToString());
                    words     += int.Parse(Folio.Attribute("Words").Value.ToString());
                    sentences += int.Parse(Folio.Attribute("Sentences").Value.ToString());
                }
            }
        }

        public void MRUUpdate(string filename)
        {
            //set the MRUFile property with MRUFile1 representing most recent opened file
            if (Application.Current.Properties["MRUFile1"] != null)
            {
                if (Application.Current.Properties["MRUFile2"] != null)
                {
                    if (Application.Current.Properties["MRUFile3"] != null)
                    {
                        if (Application.Current.Properties["MRUFile4"] != null)
                        {
                            if (Application.Current.Properties["MRUFile5"] != null)
                            {
                                //we have 5 MRUFiles - check if our file is any one of them
                                if (!String.Equals(filename, (string)Application.Current.Properties["MRUFile1"], StringComparison.Ordinal))
                                //if (filename != (string)Application.Current.Properties["MRUFile1"])
                                {
                                    if (!String.Equals(filename, (string)Application.Current.Properties["MRUFile2"], StringComparison.Ordinal))
                                    //if (filename != (string)Application.Current.Properties["MRUFile2"])
                                    {
                                        if (!String.Equals(filename, (string)Application.Current.Properties["MRUFile3"], StringComparison.Ordinal))
                                        //if (filename != (string)Application.Current.Properties["MRUFile3"])
                                        {
                                            if (!String.Equals(filename, (string)Application.Current.Properties["MRUFile4"], StringComparison.Ordinal))
                                            //if (filename != (string)Application.Current.Properties["MRUFile4"])
                                            {
                                                //it doesn't matter if MRUFile5 is the "new" file or not as this works in any condition
                                                Application.Current.Properties["MRUFile5"] = Application.Current.Properties["MRUFile4"];
                                                Application.Current.Properties["MRUFile4"] = Application.Current.Properties["MRUFile3"];
                                                Application.Current.Properties["MRUFile3"] = Application.Current.Properties["MRUFile2"];
                                                Application.Current.Properties["MRUFile2"] = Application.Current.Properties["MRUFile1"];
                                                Application.Current.Properties["MRUFile1"] = filename;
                                            }
                                            else //"new" file is MRUFile4 - swap MRUFiles
                                            {
                                                Application.Current.Properties["MRUFile4"] = Application.Current.Properties["MRUFile3"];
                                                Application.Current.Properties["MRUFile3"] = Application.Current.Properties["MRUFile2"];
                                                Application.Current.Properties["MRUFile2"] = Application.Current.Properties["MRUFile1"];
                                                Application.Current.Properties["MRUFile1"] = filename;
                                            }
                                        }
                                        else //"new" file is MRUFile3 - swap MRUFiles
                                        {
                                            Application.Current.Properties["MRUFile3"] = Application.Current.Properties["MRUFile2"];
                                            Application.Current.Properties["MRUFile2"] = Application.Current.Properties["MRUFile1"];
                                            Application.Current.Properties["MRUFile1"] = filename;
                                        }
                                    }
                                    else //"new" file is MRUFile2 - swap MRUFiles
                                    {
                                        Application.Current.Properties["MRUFile2"] = Application.Current.Properties["MRUFile1"];
                                        Application.Current.Properties["MRUFile1"] = filename;
                                    }
                                }//"new" file is MRUFile1 do nothing
                            }
                            else //No MRUFile5
                            {
                                //check if new file is MRUFile1
                                if (!String.Equals(filename, (string)Application.Current.Properties["MRUFile1"], StringComparison.Ordinal))
                                //if (filename != (string)Application.Current.Properties["MRUFile1"])
                                {
                                    //new file is not MRUFile1 - check if it is MRUFile2
                                    if (!String.Equals(filename, (string)Application.Current.Properties["MRUFile2"], StringComparison.Ordinal))
                                    //if (filename != (string)Application.Current.Properties["MRUFile2"])
                                    {
                                        //new file is not MRUFile2 - check if it is MRUFile3
                                        if (!String.Equals(filename, (string)Application.Current.Properties["MRUFile3"], StringComparison.Ordinal))
                                        //if (filename != (string)Application.Current.Properties["MRUFile3"])
                                        {
                                            //new file is not MRUFile3 - check if it is MRUFile4
                                            if (!String.Equals(filename, (string)Application.Current.Properties["MRUFile4"], StringComparison.Ordinal))
                                            //if (filename != (string)Application.Current.Properties["MRUFile4"])
                                            {
                                                //new file - push MRU file list down and add new file to top
                                                Application.Current.Properties["MRUFile5"] = Application.Current.Properties["MRUFile4"];
                                                Application.Current.Properties["MRUFile4"] = Application.Current.Properties["MRUFile3"];
                                                Application.Current.Properties["MRUFile3"] = Application.Current.Properties["MRUFile2"];
                                                Application.Current.Properties["MRUFile2"] = Application.Current.Properties["MRUFile1"];
                                                Application.Current.Properties["MRUFile1"] = filename;
                                            }
                                            else //new file is MRUFile4 - swap MRUFiles
                                            {
                                                Application.Current.Properties["MRUFile4"] = Application.Current.Properties["MRUFile3"];
                                                Application.Current.Properties["MRUFile3"] = Application.Current.Properties["MRUFile2"];
                                                Application.Current.Properties["MRUFile2"] = Application.Current.Properties["MRUFile1"];
                                                Application.Current.Properties["MRUFile1"] = filename;
                                            }
                                        }
                                        else //new file is MRUFile3 - swap MRUFiles
                                        {
                                            Application.Current.Properties["MRUFile3"] = Application.Current.Properties["MRUFile2"];
                                            Application.Current.Properties["MRUFile2"] = Application.Current.Properties["MRUFile1"];
                                            Application.Current.Properties["MRUFile1"] = filename;
                                        }
                                    }
                                    else //new file is MRUFile2 - swap MRUFile1 and MRUFile2
                                    {
                                        Application.Current.Properties["MRUFile2"] = Application.Current.Properties["MRUFile1"];
                                        Application.Current.Properties["MRUFile1"] = filename;
                                    }
                                }//new file is MRUFile1 do nothing
                            }
                        }
                        else //No MRUFile4
                        {
                            //check if new file is MRUFile1
                            if (!String.Equals(filename, (string)Application.Current.Properties["MRUFile1"], StringComparison.Ordinal))
                            //if (filename != (string)Application.Current.Properties["MRUFile1"])
                            {
                                //new file is not MRUFile1 - check if it is MRUFile2
                                if (!String.Equals(filename, (string)Application.Current.Properties["MRUFile2"], StringComparison.Ordinal))
                                //if (filename != (string)Application.Current.Properties["MRUFile2"])
                                {
                                    //new file is not MRUFile2 - check if it is MRUFile3
                                    if (!String.Equals(filename, (string)Application.Current.Properties["MRUFile3"], StringComparison.Ordinal))
                                    //if (filename != (string)Application.Current.Properties["MRUFile3"])
                                    {
                                        //new file - push MRU file list down and add new file to top
                                        Application.Current.Properties["MRUFile4"] = Application.Current.Properties["MRUFile3"];
                                        Application.Current.Properties["MRUFile3"] = Application.Current.Properties["MRUFile2"];
                                        Application.Current.Properties["MRUFile2"] = Application.Current.Properties["MRUFile1"];
                                        Application.Current.Properties["MRUFile1"] = filename;
                                    }
                                    else //new file is MRUFile3 - swap MRUFiles
                                    {
                                        Application.Current.Properties["MRUFile3"] = Application.Current.Properties["MRUFile2"];
                                        Application.Current.Properties["MRUFile2"] = Application.Current.Properties["MRUFile1"];
                                        Application.Current.Properties["MRUFile1"] = filename;
                                    }
                                }
                                else //new file is MRUFile2 - swap MRUFile1 and MRUFile2
                                {
                                    Application.Current.Properties["MRUFile2"] = Application.Current.Properties["MRUFile1"];
                                    Application.Current.Properties["MRUFile1"] = filename;
                                }
                            }//new file is MRUFile1 do nothing
                        }
                    }
                    else //No MRUFile3
                    {
                        //check if new file is MRUFile1
                        if (!String.Equals(filename, (string)Application.Current.Properties["MRUFile1"], StringComparison.Ordinal))
                        //if (filename != (string)Application.Current.Properties["MRUFile1"])
                        {
                            //new file is not MRUFile1 - check if it is MRUFile2
                            if (!String.Equals(filename, (string)Application.Current.Properties["MRUFile2"], StringComparison.Ordinal))
                            //if (filename != (string)Application.Current.Properties["MRUFile2"])
                            {
                                //new file - push MRU file list down and add new file to top
                                Application.Current.Properties["MRUFile3"] = Application.Current.Properties["MRUFile2"];
                                Application.Current.Properties["MRUFile2"] = Application.Current.Properties["MRUFile1"];
                                Application.Current.Properties["MRUFile1"] = filename;
                            }
                            else //new file is MRUFile2 - swap MRUFile1 and MRUFile2
                            {
                                Application.Current.Properties["MRUFile2"] = Application.Current.Properties["MRUFile1"];
                                Application.Current.Properties["MRUFile1"] = filename;
                            }
                        }
                        //new file is MRUFile1 do nothing
                    }
                }
                else //No MRUFile2
                {
                    //check if we are reopening MRUFile1
                    if (!String.Equals(filename, (string)Application.Current.Properties["MRUFile1"], StringComparison.Ordinal))
                    //if (filename != (string)Application.Current.Properties["MRUFile1"])
                    {
                        //new file - move MRUFile1 to MRUFile2 and new file becomes MRUFile1
                        Application.Current.Properties["MRUFile2"] = Application.Current.Properties["MRUFile1"];
                        Application.Current.Properties["MRUFile1"] = filename;
                    }
                }
            }
            else //no MRUFiles
            {
                Application.Current.Properties["MRUFile1"] = filename;
            }
        }//end MRUUpdate
    }//end _Codex class
}//end namespace EruditeWriter
